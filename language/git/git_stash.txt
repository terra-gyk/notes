// git 在分支 f1 上做了修改，但是未存储， 现在需要切换到 f2 分支上进行开发，我希望 f1 的被保存，且不提交，同时 f2 无法看到f1 的修改，应该怎么做
// 注意 使用stash 命令之后，修改会被暂存，也就是文件会被恢复

步骤 1：暂存 f1 分支上的修改
在 f1 分支下，使用 git stash 命令将未提交的修改暂存起来。执行该命令时，Git 会把工作目录和暂存区的修改保存到一个栈中，同时将工作目录恢复到上一次提交时的状态。
git stash

如果你想为这次暂存操作添加一个描述信息，方便后续识别，可以使用以下命令：
git stash save "描述信息，例如：f1 分支未完成的功能修改"

步骤 2：切换到 f2 分支
使用 git checkout 命令切换到 f2 分支。由于上一步已经将 f1 分支的修改暂存，切换分支时不会出现冲突，并且 f2 分支也不会受到 f1 分支修改的影响。
git checkout f2

步骤 3：在 f2 分支进行开发
在 f2 分支上进行你需要的开发工作，完成相应的修改和提交操作。例如：

# 进行一些文件的修改
# ...
# 将修改添加到暂存区
git add .
# 提交修改
git commit -m "在 f2 分支上完成的新功能开发"

步骤 4：（可选）返回 f1 分支并恢复修改
当你在 f2 分支的工作完成后，如果需要回到 f1 分支继续之前的工作，可以先切换回 f1 分支，然后使用 git stash pop 或 git stash apply 命令恢复之前暂存的修改。
使用 git stash pop
该命令会将栈顶的暂存内容恢复到工作目录，并且将该暂存记录从栈中移除。

# 切换回 f1 分支
git checkout f1
# 恢复暂存的修改
git stash pop
使用 git stash apply
该命令同样会将栈顶的暂存内容恢复到工作目录，但不会将该暂存记录从栈中移除，这样你之后还可以再次使用该暂存记录。

# 切换回 f1 分支
git checkout f1
# 恢复暂存的修改
git stash apply
或者 git stash apply stash@{0}

步骤 5：（可选）查看暂存栈和清理暂存记录
如果你多次使用了 git stash 命令，可能会有多个暂存记录。可以使用以下命令查看暂存栈中的记录：
git stash list

如果你想删除某个暂存记录，可以使用 git stash drop 命令，例如删除栈顶的记录：
git stash drop stash@{0}

如果你想清空整个暂存栈，可以使用 git stash clear 命令：
git stash clear
通过以上步骤，你可以在不提交 f1 分支修改的情况下安全地切换到 f2 分支进行开发，并且后续还能方便地恢复 f1 分支的修改继续工作。